{"version":3,"names":[],"mappings":"","sources":["src/js/main.js"],"sourcesContent":["/* jshint esversion: 6 */\r\n/* global window, document, TweenMax, THREE, WEBVR */\r\n\r\n// import * as THREE from 'three';\r\n//import { threadId } from 'worker_threads';\r\n\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\r\nimport { RoughnessMipmapper } from 'three/examples/jsm/utils/RoughnessMipmapper.js';\r\nimport InteractiveMesh from './interactive/interactive.mesh';\r\n\r\nclass webvr {\r\n\r\n\tconstructor() {\r\n\t\tthis.i = 0;\r\n\t\tthis.mouse = { x: 0, y: 0 };\r\n\t\tthis.parallax = { x: 0, y: 0 };\r\n\t\tthis.size = { width: 0, height: 0, aspect: 0 };\r\n\t\tthis.cameraDirection = new THREE.Vector3();\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tinit() {\r\n\t\tthis.render = this.render.bind(this);\r\n\r\n\t\tconst section = this.section = document.querySelector('.webvr');\r\n\t\tconst container = this.container = section.querySelector('.webvr__container');\r\n\t\tconst debugInfo = this.debugInfo = section.querySelector('.debug__info');\r\n\r\n\t\tconst scene = this.scene = new THREE.Scene();\r\n\r\n\t\tconst camera = this.camera = new THREE.PerspectiveCamera(45, container.offsetWidth / container.offsetHeight, 0.1, 1000);\r\n\t\tcamera.position.set(-1.8, 0.6, 2.7);\r\n\t\tcamera.target = new THREE.Vector3();\r\n\r\n\t\tconst renderer = this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n\t\trenderer.setClearColor(0x666666, 1);\r\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\r\n\t\trenderer.setSize(container.offsetWidth, container.offsetHeight);\r\n\t\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n\t\trenderer.toneMappingExposure = 0.8;\r\n\t\trenderer.outputEncoding = THREE.sRGBEncoding;\r\n\t\tcontainer.appendChild(renderer.domElement);\r\n\r\n\t\tconst controls = this.controler = new OrbitControls(camera, renderer.domElement);\r\n\t\tcontrols.addEventListener('change', this.render); // use if there is no animation loop\r\n\t\tcontrols.minDistance = 2;\r\n\t\tcontrols.maxDistance = 10\r\n\t\tcontrols.target.set(0, 0, -0.2);\r\n\t\tcontrols.update();\r\n\r\n\t\tconst pivot = this.pivot = new THREE.Group();\r\n\t\tthis.scene.add(pivot);\r\n\r\n\t\tthis.loadRgbeBackground('/ModelViewer/textures/equirectangular/', 'leadenhall_market_2k.hdr', (envMap) => {\r\n\t\t\tthis.render();\r\n\t\t\tthis.loadGltfModel('/ModelViewer/models/gltf/model/gltf/', 'boot.gltf', (model) => {\r\n\t\t\t\tpivot.scale.set(0.1, 0.1, 0.1);\r\n\t\t\t\tpivot.position.set(0, 0, 0); //-0.5\r\n\t\t\t\tpivot.add(model);\r\n\t\t\t\tthis.render();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.onWindowResize = this.onWindowResize.bind(this);\r\n\t\twindow.addEventListener('resize', this.onWindowResize, false);\r\n\t}\r\n\r\n\tloadRgbeBackground(path, file, callback) {\r\n\t\tconst scene = this.scene;\r\n\t\tconst renderer = this.renderer;\r\n\t\tconst pmremGenerator = new THREE.PMREMGenerator(renderer);\r\n\t\tpmremGenerator.compileEquirectangularShader();\r\n\t\tconst loader = new RGBELoader();\r\n\t\tloader\r\n\t\t\t.setDataType(THREE.UnsignedByteType)\r\n\t\t\t.setPath(path)\r\n\t\t\t.load(file, function (texture) {\r\n\t\t\t\tconst envMap = pmremGenerator.fromEquirectangular(texture).texture;\r\n\t\t\t\tscene.background = envMap;\r\n\t\t\t\tscene.environment = envMap;\r\n\t\t\t\ttexture.dispose();\r\n\t\t\t\tpmremGenerator.dispose();\r\n\t\t\t\tif (typeof callback === 'function') {\r\n\t\t\t\t\tcallback(envMap);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\treturn loader;\r\n\t}\r\n\r\n\tloadGltfModel(path, file, callback) {\r\n\t\tconst renderer = this.renderer;\r\n\t\tconst roughnessMipmapper = new RoughnessMipmapper(renderer); // optional\r\n\t\tconst loader = new GLTFLoader().setPath(path);\r\n\t\tloader.load(file, function (gltf) {\r\n\t\t\tgltf.scene.traverse(function (child) {\r\n\t\t\t\tif (child.isMesh) {\r\n\t\t\t\t\troughnessMipmapper.generateMipmaps(child.material);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (typeof callback === 'function') {\r\n\t\t\t\tcallback(gltf.scene);\r\n\t\t\t}\r\n\t\t\troughnessMipmapper.dispose();\r\n\t\t});\r\n\t}\r\n\r\n\tupdateRaycaster() {\r\n\t\ttry {\r\n\t\t\t/*\r\n\t\t\tconst controllers = this.controllers;\r\n\t\t\tconst controller = controllers.controller;\r\n\t\t\tif (controller) {\r\n\t\t\t\tconst raycaster = this.raycaster;\r\n\t\t\t\tconst position = controller.position;\r\n\t\t\t\tconst rotation = controller.getWorldDirection(controllers.controllerDirection).multiplyScalar(-1);\r\n\t\t\t\traycaster.set(position, rotation);\r\n\t\t\t\tconst hit = InteractiveMesh.hittest(raycaster, controllers.gamepads.button);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t} catch (error) {\r\n\t\t\tthis.debugInfo.innerHTML = error;\r\n\t\t}\r\n\t}\r\n\r\n\trender(delta) {\r\n\t\ttry {\r\n\t\t\t// this.updateOld();\r\n\t\t\tconst renderer = this.renderer;\r\n\t\t\trenderer.render(this.scene, this.camera);\r\n\t\t\tthis.i++;\r\n\t\t} catch (error) {\r\n\t\t\tthis.debugInfo.innerHTML = error;\r\n\t\t}\r\n\t}\r\n\r\n\tanimate() {\r\n\t\tconst renderer = this.renderer;\r\n\t\trenderer.setAnimationLoop(() =>\r\n\t\t\tthis.render());\r\n\t}\r\n\r\n\tonWindowResize() {\r\n\t\ttry {\r\n\t\t\tconst container = this.container,\r\n\t\t\t\trenderer = this.renderer,\r\n\t\t\t\tcamera = this.camera;\r\n\t\t\tconst size = this.size;\r\n\t\t\tsize.width = container.offsetWidth;\r\n\t\t\tsize.height = container.offsetHeight;\r\n\t\t\tsize.aspect = size.width / size.height;\r\n\t\t\tif (renderer) {\r\n\t\t\t\trenderer.setSize(size.width, size.height);\r\n\t\t\t}\r\n\t\t\tif (camera) {\r\n\t\t\t\tcamera.aspect = size.width / size.height;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.debugInfo.innerHTML = error;\r\n\t\t}\r\n\t}\r\n\r\n\tinitOld__() {\r\n\t\tconst loader = new THREE.TextureLoader();\r\n\t\t//plane\r\n\t\t/*\r\n\t\tconst material3 = new THREE.MeshLambertMaterial({\r\n\t\t\tmap: loader.load('img/examples/360_world.jpg')\r\n\t\t\t//'https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg'\r\n\t\t});\r\n\t\tconst geometry3 = new THREE.PlaneGeometry(300, 200);\r\n\t\t//1, 1 * .75\r\n\t\t// combine our image geometry and material into a mesh\r\n\t\tconst meshPlane = new THREE.Mesh(geometry3, material3);\r\n\t\t// set the position of the image mesh in the x,y,z dimensions\r\n\t\tmeshPlane.position.set(0, 0, -110)\r\n\t\t// add the image to the scene\r\n\t\tscene.add(meshPlane);\r\n\t\t*/\r\n\t\tconst light2 = new THREE.PointLight(0xffffff, 1, 0);\r\n\t\t// Specify the light's position\r\n\t\tlight2.position.set(1, 1, 100);\r\n\t\t// Add the light to the scene\r\n\t\tscene.add(light2)\r\n\t\tconst materialLoader1 = new THREE.MTLLoader().load('models/valagro/valagro.mtl', (materials1) => {\r\n\t\t\tconsole.log(materials1);\r\n\t\t\tmaterials1.preload();\r\n\t\t\tthis.materials1 = materials1;\r\n\t\t});\r\n\t\tconst materialLoader2 = new THREE.MTLLoader().load('models/oil/oilbottle.mtl', (materials2) => {\r\n\t\t\tconsole.log(materials2);\r\n\t\t\tmaterials2.preload();\r\n\t\t\tthis.materials2 = materials2;\r\n\t\t\tthis.loadObjects__();\r\n\t\t});\r\n\t}\r\n\r\n\tloadObjects__() {\r\n\r\n\t\t//object 3d obj\r\n\t\tconst meshtest1 = new THREE.Object3D();\r\n\t\tconst meshtest2 = new THREE.Object3D();\r\n\t\tconst meshtest3 = new THREE.Object3D();\r\n\t\tconst meshTest4 = new THREE.Object3D();\r\n\r\n\t\tconst textureObj = new THREE.TextureLoader().load('img/floor.jpg');\r\n\t\tconst materialObj1 = new THREE.MeshMatcapMaterial({\r\n\t\t\tcolor: 0x00ffff,\r\n\t\t\t//matcap: textureObj,\r\n\t\t\ttransparent: true,\r\n\t\t\topacity: 1,\r\n\t\t});\r\n\r\n\t\tconst loaderObj1 = new THREE.OBJLoader();\r\n\t\tloaderObj1.load(\r\n\t\t\t'models/logo/logo_ws.obj',\r\n\r\n\t\t\t(object) => {\r\n\r\n\t\t\t\tobject.traverse((child) => {\r\n\t\t\t\t\t// console.log(child);\r\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\r\n\t\t\t\t\t\tchild.material = materialObj1;\r\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -10);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tmeshtest1.add(object);\r\n\t\t\t},\r\n\t\t\t(xhr) => {\r\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log('An error happened');\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t/*const loaderObj2 = new THREE.OBJLoader();\r\n\t\tloaderObj2.setMaterials(this.materials1);\r\n\t\tloaderObj2.load(\r\n\t\t\t'models/valagro/valagro.obj',\r\n\r\n\t\t\t(object) => {\r\n\r\n\t\t\t\tobject.traverse((child) => {\r\n\t\t\t\t\t// console.log(child);\r\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\r\n\t\t\t\t\t\t// child.material = materialObj2;\r\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -100);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tobject.onBeforeRender = () => {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.object2 = object;\r\n\r\n\t\t\t\tmeshtest2.add(object);\r\n\t\t\t},\r\n\t\t\t(xhr) => {\r\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log('An error happened');\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tconst loaderObj3 = new THREE.OBJLoader();\r\n\t\tloaderObj3.setMaterials(this.materials2);\r\n\t\tloaderObj3.load(\r\n\t\t\t'models/oil/oilbottle.obj',\r\n\r\n\t\t\t(object) => {\r\n\r\n\t\t\t\tobject.traverse((child) => {\r\n\r\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\r\n\r\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -80);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tobject.onBeforeRender = () => {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.object3 = object;\r\n\r\n\t\t\t\tmeshtest3.add(object);\r\n\t\t\t},\r\n\t\t\t(xhr) => {\r\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log('An error happened');\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tconst loaderFBX = new THREE.FBXLoader();\r\n\t\tloaderFBX.load(\r\n\t\t\t'models/oil/objects.fbx',\r\n\t\t\t(object) => {\r\n\t\t\t\tobject.setMaterials(materialObj1);\r\n\t\t\t\tobject.position(0, 0, -50);\r\n\r\n\t\t\t\tobject.onBeforeRender = () => {\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tthis.object4 = object;\r\n\t\t\t\tmeshTest4.add(object);\r\n\t\t\t},\r\n\t\t\t(xhr) => {\r\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log('An error happened');\r\n\t\t\t}\r\n\t\t);*/\r\n\r\n\t\tconst loaderGLTF = new GLTFLoader();\r\n\t\tloaderGLTF.load(\r\n\t\t\t'models/GLTF/tau-marin.gltf',\r\n\t\t\t(object) => {\r\n\r\n\t\t\t\tobject.traverse((child) => {\r\n\r\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\r\n\r\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -80);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tobject.onBeforeRender = () => {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.object3 = object;\r\n\r\n\t\t\t\tmeshTest4.add(object);\r\n\t\t\t},\r\n\t\t\t(xhr) => {\r\n\t\t\t\t// called while loading is progressing\r\n\t\t\t\t//console.log(`${( xhr.loaded / xhr.total * 100 )}% loaded`);\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\t// called when loading has errors\r\n\t\t\t\tconsole.error('An error happened', error);\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\tthis.scene.add(meshtest1);\r\n\t\t//this.scene.add(meshtest2);\r\n\t\t//this.scene.add(meshtest3);\r\n\t\tthis.scene.add(meshTest4);\r\n\r\n\t\t//oggetto1\r\n\t\tconst geometry = new THREE.BoxGeometry(0.5, 0.3, 0.3);\r\n\t\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });\r\n\t\t//oggetto2\r\n\t\tconst material2 = new THREE.MeshLambertMaterial({ color: 0xe4059 });\r\n\t\tconst geometry2 = new THREE.DodecahedronGeometry(0.5, 0)\r\n\r\n\t\tconst cube = this.cube = new InteractiveMesh(geometry, material);\r\n\t\t//cube.geometry.vertices[0].Vector3(2, 1, 1);\r\n\t\tcube.geometry.verticesNeedUpdate = true;\r\n\r\n\t\tconst prisme = this.prisme = new InteractiveMesh(geometry2, material2);\r\n\r\n\t\tcube.position.set(-3, 1, -5);\r\n\t\tprisme.position.set(3, 1, -5);\r\n\r\n\t\tcube.on('over', () => {\r\n\t\t\tcube.material.color.setHex(0xff0000);\r\n\t\t});\r\n\t\tcube.on('out', () => {\r\n\t\t\tcube.material.color.setHex(0x00ff00);\r\n\t\t});\r\n\t\tcube.on('down', () => {\r\n\t\t\tcube.material.color.setHex(0xffffff);\r\n\t\t});\r\n\t\tcube.on('up', () => {\r\n\t\t\tcube.material.color.setHex(0x0000ff);\r\n\t\t});\r\n\t\tthis.scene.add(cube, prisme);\r\n\r\n\t\tconst light = new THREE.HemisphereLight(0xffffff, 0x000000, 1);\r\n\t\tthis.scene.add(light);\r\n\r\n\t\tconst raycaster = this.raycaster = new THREE.Raycaster();\r\n\r\n\t}\r\n\r\n\tupdateOld__() {\r\n\t\tconst s = 1 + Math.cos(this.i * 0.1) * 0.5;\r\n\t\tif (this.cuber) {\r\n\t\t\tthis.cube.rotation.y += Math.PI / 180 * 5;\r\n\t\t\tthis.cube.rotation.x += Math.PI / 180 * 1;\r\n\t\t\tthis.cube.scale.set(s, s, s);\r\n\t\t}\r\n\t\tif (this.prisme) {\r\n\t\t\tthis.prisme.rotation.y += Math.PI / 180 * 5;\r\n\t\t\tthis.prisme.rotation.x += Math.PI / 180 * 1;\r\n\t\t\tthis.prisme.scale.set(s, s, s);\r\n\t\t}\r\n\t\t//this.object2.rotation.z += Math.PI / 180 * 1;\r\n\t\t//this.object3.rotation.z -= Math.PI / 180 * 1;\r\n\t\t//this.prisme.position.x += 0.001;\r\n\t\t//this.prisme.position.y += 0.002;\r\n\t\tif (this.controllers) {\r\n\t\t\tthis.controllers.update();\r\n\t\t}\r\n\t\t// this.updateRaycaster();\r\n\t}\r\n\r\n}\r\n\r\nconst tour = new webvr();\r\n// tour.animate();\r\n"],"file":"docs\\js\\main.js"}