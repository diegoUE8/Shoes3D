{"version":3,"names":[],"mappings":"","sources":["src/js/main.js"],"sourcesContent":["/* jshint esversion: 6 */\n/* global window, document, TweenMax, THREE, WEBVR */\n\n// import * as THREE from 'three';\n//import { threadId } from 'worker_threads';\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport { RoughnessMipmapper } from 'three/examples/jsm/utils/RoughnessMipmapper.js';\nimport InteractiveMesh from './interactive/interactive.mesh';\n\nclass webvr {\n\n\tconstructor() {\n\t\tthis.i = 0;\n\t\tthis.mouse = { x: 0, y: 0 };\n\t\tthis.parallax = { x: 0, y: 0 };\n\t\tthis.size = { width: 0, height: 0, aspect: 0 };\n\t\tthis.cameraDirection = new THREE.Vector3();\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tthis.render = this.render.bind(this);\n\n\t\tconst section = this.section = document.querySelector('.webvr');\n\t\tconst container = this.container = section.querySelector('.webvr__container');\n\t\tconst debugInfo = this.debugInfo = section.querySelector('.debug__info');\n\n\t\tconst scene = this.scene = new THREE.Scene();\n\n\t\tconst camera = this.camera = new THREE.PerspectiveCamera(45, container.offsetWidth / container.offsetHeight, 0.1, 1000);\n\t\tcamera.position.set(-1.8, 0.6, 2.7);\n\t\tcamera.target = new THREE.Vector3();\n\n\t\tconst renderer = this.renderer = new THREE.WebGLRenderer({ antialias: true });\n\t\trenderer.setClearColor(0x666666, 1);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\trenderer.setSize(container.offsetWidth, container.offsetHeight);\n\t\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\n\t\trenderer.toneMappingExposure = 0.8;\n\t\trenderer.outputEncoding = THREE.sRGBEncoding;\n\t\tcontainer.appendChild(renderer.domElement);\n\n\t\tconst controls = this.controler = new OrbitControls(camera, renderer.domElement);\n\t\tcontrols.addEventListener('change', this.render); // use if there is no animation loop\n\t\tcontrols.minDistance = 2;\n\t\tcontrols.maxDistance = 10\n\t\tcontrols.target.set(0, 0, -0.2);\n\t\tcontrols.update();\n\n\t\tconst pivot = this.pivot = new THREE.Group();\n\t\tthis.scene.add(pivot);\n\n\t\tthis.loadRgbeBackground('/Shoes3D/textures/equirectangular/', 'leadenhall_market_2k.hdr', (envMap) => {\n\t\t\tthis.render();\n\t\t\tthis.loadGltfModel('/Shoes3D/models/gltf/model/gltf/', 'worn_brown_boots.gltf', (model) => {\n\t\t\t\tpivot.scale.set(1.5, 1.5, 1.5);\n\t\t\t\tpivot.position.set(0, -0.2, 0); //-0.5\n\t\t\t\tpivot.add(model);\n\t\t\t\tthis.render();\n\t\t\t});\n\t\t});\n\n\t\tthis.onWindowResize = this.onWindowResize.bind(this);\n\t\twindow.addEventListener('resize', this.onWindowResize, false);\n\t}\n\n\tloadRgbeBackground(path, file, callback) {\n\t\tconst scene = this.scene;\n\t\tconst renderer = this.renderer;\n\t\tconst pmremGenerator = new THREE.PMREMGenerator(renderer);\n\t\tpmremGenerator.compileEquirectangularShader();\n\t\tconst loader = new RGBELoader();\n\t\tloader\n\t\t\t.setDataType(THREE.UnsignedByteType)\n\t\t\t.setPath(path)\n\t\t\t.load(file, function (texture) {\n\t\t\t\tconst envMap = pmremGenerator.fromEquirectangular(texture).texture;\n\t\t\t\tscene.background = envMap;\n\t\t\t\tscene.environment = envMap;\n\t\t\t\ttexture.dispose();\n\t\t\t\tpmremGenerator.dispose();\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\tcallback(envMap);\n\t\t\t\t}\n\t\t\t});\n\t\treturn loader;\n\t}\n\n\tloadGltfModel(path, file, callback) {\n\t\tconst renderer = this.renderer;\n\t\tconst roughnessMipmapper = new RoughnessMipmapper(renderer); // optional\n\t\tconst loader = new GLTFLoader().setPath(path);\n\t\tloader.load(file, function (gltf) {\n\t\t\tgltf.scene.traverse(function (child) {\n\t\t\t\tif (child.isMesh) {\n\t\t\t\t\troughnessMipmapper.generateMipmaps(child.material);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\tcallback(gltf.scene);\n\t\t\t}\n\t\t\troughnessMipmapper.dispose();\n\t\t});\n\t}\n\n\tupdateRaycaster() {\n\t\ttry {\n\t\t\t/*\n\t\t\tconst controllers = this.controllers;\n\t\t\tconst controller = controllers.controller;\n\t\t\tif (controller) {\n\t\t\t\tconst raycaster = this.raycaster;\n\t\t\t\tconst position = controller.position;\n\t\t\t\tconst rotation = controller.getWorldDirection(controllers.controllerDirection).multiplyScalar(-1);\n\t\t\t\traycaster.set(position, rotation);\n\t\t\t\tconst hit = InteractiveMesh.hittest(raycaster, controllers.gamepads.button);\n\t\t\t}\n\t\t\t*/\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\trender(delta) {\n\t\ttry {\n\t\t\t// this.updateOld();\n\t\t\tconst renderer = this.renderer;\n\t\t\trenderer.render(this.scene, this.camera);\n\t\t\tthis.i++;\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tanimate() {\n\t\tconst renderer = this.renderer;\n\t\trenderer.setAnimationLoop(() =>\n\t\t\tthis.render());\n\t}\n\n\tonWindowResize() {\n\t\ttry {\n\t\t\tconst container = this.container,\n\t\t\t\trenderer = this.renderer,\n\t\t\t\tcamera = this.camera;\n\t\t\tconst size = this.size;\n\t\t\tsize.width = container.offsetWidth;\n\t\t\tsize.height = container.offsetHeight;\n\t\t\tsize.aspect = size.width / size.height;\n\t\t\tif (renderer) {\n\t\t\t\trenderer.setSize(size.width, size.height);\n\t\t\t}\n\t\t\tif (camera) {\n\t\t\t\tcamera.aspect = size.width / size.height;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tinitOld__() {\n\t\tconst loader = new THREE.TextureLoader();\n\t\t//plane\n\t\t/*\n\t\tconst material3 = new THREE.MeshLambertMaterial({\n\t\t\tmap: loader.load('img/examples/360_world.jpg')\n\t\t\t//'https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg'\n\t\t});\n\t\tconst geometry3 = new THREE.PlaneGeometry(300, 200);\n\t\t//1, 1 * .75\n\t\t// combine our image geometry and material into a mesh\n\t\tconst meshPlane = new THREE.Mesh(geometry3, material3);\n\t\t// set the position of the image mesh in the x,y,z dimensions\n\t\tmeshPlane.position.set(0, 0, -110)\n\t\t// add the image to the scene\n\t\tscene.add(meshPlane);\n\t\t*/\n\t\tconst light2 = new THREE.PointLight(0xffffff, 1, 0);\n\t\t// Specify the light's position\n\t\tlight2.position.set(1, 1, 100);\n\t\t// Add the light to the scene\n\t\tscene.add(light2)\n\t\tconst materialLoader1 = new THREE.MTLLoader().load('models/valagro/valagro.mtl', (materials1) => {\n\t\t\tconsole.log(materials1);\n\t\t\tmaterials1.preload();\n\t\t\tthis.materials1 = materials1;\n\t\t});\n\t\tconst materialLoader2 = new THREE.MTLLoader().load('models/oil/oilbottle.mtl', (materials2) => {\n\t\t\tconsole.log(materials2);\n\t\t\tmaterials2.preload();\n\t\t\tthis.materials2 = materials2;\n\t\t\tthis.loadObjects__();\n\t\t});\n\t}\n\n\tloadObjects__() {\n\n\t\t//object 3d obj\n\t\tconst meshtest1 = new THREE.Object3D();\n\t\tconst meshtest2 = new THREE.Object3D();\n\t\tconst meshtest3 = new THREE.Object3D();\n\t\tconst meshTest4 = new THREE.Object3D();\n\n\t\tconst textureObj = new THREE.TextureLoader().load('img/floor.jpg');\n\t\tconst materialObj1 = new THREE.MeshMatcapMaterial({\n\t\t\tcolor: 0x00ffff,\n\t\t\t//matcap: textureObj,\n\t\t\ttransparent: true,\n\t\t\topacity: 1,\n\t\t});\n\n\t\tconst loaderObj1 = new THREE.OBJLoader();\n\t\tloaderObj1.load(\n\t\t\t'models/logo/logo_ws.obj',\n\n\t\t\t(object) => {\n\n\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t// console.log(child);\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\n\t\t\t\t\t\tchild.material = materialObj1;\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -10);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmeshtest1.add(object);\n\t\t\t},\n\t\t\t(xhr) => {\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tconsole.log('An error happened');\n\t\t\t}\n\t\t);\n\n\t\t/*const loaderObj2 = new THREE.OBJLoader();\n\t\tloaderObj2.setMaterials(this.materials1);\n\t\tloaderObj2.load(\n\t\t\t'models/valagro/valagro.obj',\n\n\t\t\t(object) => {\n\n\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t// console.log(child);\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\n\t\t\t\t\t\t// child.material = materialObj2;\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -100);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tobject.onBeforeRender = () => {\n\n\t\t\t\t}\n\n\t\t\t\tthis.object2 = object;\n\n\t\t\t\tmeshtest2.add(object);\n\t\t\t},\n\t\t\t(xhr) => {\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tconsole.log('An error happened');\n\t\t\t}\n\t\t);\n\n\t\tconst loaderObj3 = new THREE.OBJLoader();\n\t\tloaderObj3.setMaterials(this.materials2);\n\t\tloaderObj3.load(\n\t\t\t'models/oil/oilbottle.obj',\n\n\t\t\t(object) => {\n\n\t\t\t\tobject.traverse((child) => {\n\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\n\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -80);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tobject.onBeforeRender = () => {\n\n\t\t\t\t}\n\n\t\t\t\tthis.object3 = object;\n\n\t\t\t\tmeshtest3.add(object);\n\t\t\t},\n\t\t\t(xhr) => {\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tconsole.log('An error happened');\n\t\t\t}\n\t\t);\n\n\t\tconst loaderFBX = new THREE.FBXLoader();\n\t\tloaderFBX.load(\n\t\t\t'models/oil/objects.fbx',\n\t\t\t(object) => {\n\t\t\t\tobject.setMaterials(materialObj1);\n\t\t\t\tobject.position(0, 0, -50);\n\n\t\t\t\tobject.onBeforeRender = () => {\n\n\t\t\t\t\t},\n\t\t\t\t\tthis.object4 = object;\n\t\t\t\tmeshTest4.add(object);\n\t\t\t},\n\t\t\t(xhr) => {\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tconsole.log('An error happened');\n\t\t\t}\n\t\t);*/\n\n\t\tconst loaderGLTF = new GLTFLoader();\n\t\tloaderGLTF.load(\n\t\t\t'models/GLTF/tau-marin.gltf',\n\t\t\t(object) => {\n\n\t\t\t\tobject.traverse((child) => {\n\n\t\t\t\t\tif (child instanceof THREE.Mesh) {\n\n\t\t\t\t\t\tchild.geometry.translate(0, 0, -80);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tobject.onBeforeRender = () => {\n\n\t\t\t\t}\n\n\t\t\t\tthis.object3 = object;\n\n\t\t\t\tmeshTest4.add(object);\n\t\t\t},\n\t\t\t(xhr) => {\n\t\t\t\t// called while loading is progressing\n\t\t\t\t//console.log(`${( xhr.loaded / xhr.total * 100 )}% loaded`);\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\t// called when loading has errors\n\t\t\t\tconsole.error('An error happened', error);\n\t\t\t},\n\t\t);\n\n\t\tthis.scene.add(meshtest1);\n\t\t//this.scene.add(meshtest2);\n\t\t//this.scene.add(meshtest3);\n\t\tthis.scene.add(meshTest4);\n\n\t\t//oggetto1\n\t\tconst geometry = new THREE.BoxGeometry(0.5, 0.3, 0.3);\n\t\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });\n\t\t//oggetto2\n\t\tconst material2 = new THREE.MeshLambertMaterial({ color: 0xe4059 });\n\t\tconst geometry2 = new THREE.DodecahedronGeometry(0.5, 0)\n\n\t\tconst cube = this.cube = new InteractiveMesh(geometry, material);\n\t\t//cube.geometry.vertices[0].Vector3(2, 1, 1);\n\t\tcube.geometry.verticesNeedUpdate = true;\n\n\t\tconst prisme = this.prisme = new InteractiveMesh(geometry2, material2);\n\n\t\tcube.position.set(-3, 1, -5);\n\t\tprisme.position.set(3, 1, -5);\n\n\t\tcube.on('over', () => {\n\t\t\tcube.material.color.setHex(0xff0000);\n\t\t});\n\t\tcube.on('out', () => {\n\t\t\tcube.material.color.setHex(0x00ff00);\n\t\t});\n\t\tcube.on('down', () => {\n\t\t\tcube.material.color.setHex(0xffffff);\n\t\t});\n\t\tcube.on('up', () => {\n\t\t\tcube.material.color.setHex(0x0000ff);\n\t\t});\n\t\tthis.scene.add(cube, prisme);\n\n\t\tconst light = new THREE.HemisphereLight(0xffffff, 0x000000, 1);\n\t\tthis.scene.add(light);\n\n\t\tconst raycaster = this.raycaster = new THREE.Raycaster();\n\n\t}\n\n\tupdateOld__() {\n\t\tconst s = 1 + Math.cos(this.i * 0.1) * 0.5;\n\t\tif (this.cuber) {\n\t\t\tthis.cube.rotation.y += Math.PI / 180 * 5;\n\t\t\tthis.cube.rotation.x += Math.PI / 180 * 1;\n\t\t\tthis.cube.scale.set(s, s, s);\n\t\t}\n\t\tif (this.prisme) {\n\t\t\tthis.prisme.rotation.y += Math.PI / 180 * 5;\n\t\t\tthis.prisme.rotation.x += Math.PI / 180 * 1;\n\t\t\tthis.prisme.scale.set(s, s, s);\n\t\t}\n\t\t//this.object2.rotation.z += Math.PI / 180 * 1;\n\t\t//this.object3.rotation.z -= Math.PI / 180 * 1;\n\t\t//this.prisme.position.x += 0.001;\n\t\t//this.prisme.position.y += 0.002;\n\t\tif (this.controllers) {\n\t\t\tthis.controllers.update();\n\t\t}\n\t\t// this.updateRaycaster();\n\t}\n\n}\n\nconst tour = new webvr();\n// tour.animate();\n"],"file":"docs\\js\\main.js"}